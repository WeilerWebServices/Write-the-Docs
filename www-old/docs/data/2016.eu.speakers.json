[
    {
        "speakers": [
          {
              "slug": "erik-romijn",
              "details": "",
              "twitter": "erikpub",
              "name": "Erik Romijn"
          }
        ],
        "title": "Healthy Minds in a Healthy Community",
        "abstract": "Open source communities attract and boast passionate, idealistic people, and many of us invest copious amounts of time and effort to contribute to our projects and support our communities. This underlying emotional attachment can make us more vulnerable to elevated stress, burnout and conflicts. And then there are those of us who also manage mental illness.\nMore often than not, we suffer these struggles in silence, feeling (and fearing) that weâ€™re alone in our trouble. Here, our communities can make a huge difference, by building a positive and safe environment where we can blossom and support ourselves and our peers, and feel included.\nThis talk will take a look at open-source communities through the eyes of various mental well-being issues and struggles, show various things that some communities already do. We will also cover several new initiatives from the community around Django, a common open-source web framework for Python, to further promote the well-being of our community members. This will hopefully inspire more communities to help foster healthy minds in a healthy environment."
    },
    {
        "speakers": [
            {
                "slug": "chris-mills",
                "details": "",
                "twitter": "chrisdavidmills",
                "name": "Chris Mills"
            }
        ],
        "title": "Feedback handling, community wrangling, panhandling",
        "abstract": "<p>Feedback is a big deal. As tech writers we want to receive adultation when the docs rock, or constructive criticism when there is cleanup required. Or EVEN BETTER, we want the engineers/community members/reddit readers/clowns giving the feedback to come on board and help fix the problems.</p>\n<p>But. Actually tweaking the signal to noise ratio to something useful is really difficult. Especially when you are curating a site as enormous as MDN, the content of which is open licensed, multilingual, and open for public editing.</p>\n<p>In this talk, MDN writer Chris Mills discusses topics such as how to choose the right feedback mechanism(s) for your situation, how to stem the torrent and get the right kind of feedback and contributions (actually useful), effective begging, stealing and borrowing, and how to balance being firm and keeping control of your product with being diplomatic and being able to sleep at night.</p>"
    },
    {
        "speakers": [
            {
                "slug": "david-oliver",
                "details": "",
                "twitter": "DaveOliver79",
                "name": "David Oliver"
            }
        ],
        "title": "Documentoring: Growing a \"Love The Docs\" community",
        "abstract": "<p>As documentarians, our primary goal is delivering the content that users need in order to use our products. This might sound simple, but we are often writing about complex systems, which will be used by people of varying skill levels. Our final publications may have all the words in the right order, but sometimes our biggest challenge is getting access to the right content in the first place.</p>\n<p>Deciding on what is the right content can often be hard, and extracting it from the development team can be even harder. Some of us might be able to read the codebase to decipher what information a user will need. Some of us might get to sit in planning and strategy meetings to gain a thorough understanding of our user and their documentation requirements. Most of us though will find something in the middle - we sit with developers and engineers, build relationships, and elbow our way into their process. </p>\n<p>This talk will look at several ways in which to mentor your engineering and marketing specialists so that everyone in your team can contribute to the documentation process. I call this \"Documentoring\" - its about training the people around you to understand the requirements of a documentarian, and to truly value the docs as part of the product lifecycle.</p>\n<p>Through my experience at IBM, and then at a small startup in Bristol, I've seen (and tried) various techniques at getting everyone in your team invested in quality documentation. I'll share stories of my successes and failures, and show you how documentation really can be a team effort, even if you stand alone in your company as the sole owner of the docs.</p>"
    },
    {
        "speakers": [
            {
                "slug": "swapnil-ogale",
                "details": "",
                "twitter": "swapnilogale",
                "name": "Swapnil Ogale"
            }
        ],
        "title": "When bad screenshots happen to good writers",
        "abstract": "<p>You have your content moving at a swift pace, your documents are getting reviewed in a timely fashion (surprise!) and you are nicely heading towards your release milestone. The only thing missing are some key screenshots that you need to put in before you publish your documentation. What you get instead are some hideous images posing as screenshots, that were captured randomly, bears no resemblance to your instructions and would make no sense whatsoever to the end user.</p>\n<p>We (documentarians) know how this usually pans out.</p>\n<p>This talk is about when bad screenshots happen to good writers.</p>\n<p>In my presentation, I will talk about:</p>\n<ol>\n<li>Why do we need screenshots and who provides these screenshots?</li>\n<li>What is the outcome of bad screenshots?</li>\n<li>Can we do something about acquiring screenshots in a standard manner?</li>\n<li>What are some best practices everyone can use for screenshots?</li>\n<li>Some examples of really useless screenshots.</li>\n</ol>"
    },
    {
        "speakers": [
            {
                "slug": "idan-gazit",
                "details": "",
                "twitter": "",
                "name": "Idan Gazit"
            }
        ],
        "title": "Self-documenting APIs with GraphQL",
        "abstract": "<p>APIs have grown into a major surface area of many products, with attendant complexity and documentation needs. The dominant model of today's APIs is the RESTful model, with neatly orthogonal resources, each occupying its own endpoint, and thoughtful use of the HTTP verbs to perform actions with or on resources.</p>\n<p>Much like the third normal form of database schema design, this conceptual purity is rarely found in the wild, as technical and practical constraints force us to a less-pure architecture for our information. Documenting \"perfect\" APIs is already a gargantuan task, documenting the mutations foisted upon your API by deadlines, performance constraints, and legacy support can be a nightmare.</p>\n<p>Enter GraphQL, a conceptually different approach to APIs. An open-source specification from Facebook, GraphQL permits clients to ask for the data that they want in the shape which they want it. This shift makes it far simpler to support clients over time, without versioned API endpoints. It makes it easier for developers consuming the API to change directions without requiring work from backend developers to alter the API responses.</p>\n<p>It's a fundamentally new way to do APIs, and it is rapidly growing in popularity. GraphQL implementations already exist for every language under the sun. GraphQL's reference implementation comes with tooling for building queries interactively in a browser, including autocompletion and INLINE DOCS (!!!111!one).</p>\n<p>How do we think about documenting APIs when the underlying model we've been using for the past decade is no longer? What cool stuff can we do that we couldn't do before?</p>\n<p>This talk is part API history lesson, part introduction to GraphQL, and part a tour of the documentation affordances provided by GraphQL.</p>"
    },
    {
        "speakers": [
            {
                "slug": "chris-ward",
                "details": "",
                "twitter": "chrischinch",
                "name": "Chris Ward"
            }
        ],
        "title": "Beyond Software - Learning from Other Technical Writers",
        "abstract": "<p>Outside of my technical writing work for software projects I have been creating a board game. A board game also requires mechanics to function and players to clearly understand how these mechanics work to use and appreciate fully.</p>\n<p>As part of my research for writing game manuals I looked at manuals for furniture, electronics, and cars to see how they explain to users how to setup and use their products.</p>\n<p>In this presentation I will look at how the technical writing skills of different industries can learn from each other.</p>\n<p>This will include:</p>\n<ul>\n<li>Game Manuals and tutorials</li>\n<li>Assembly instructions (e.g. those wonderful Ikea inserts)</li>\n<li>Service Manuals for electronics</li>\n</ul>\n<p>And as part of looking at these case studies, the presentation will cover:</p>\n<ul>\n<li>Iconography vs Text</li>\n<li>The limitations of updating print manuals</li>\n<li>Reducing language and cultural colloquialisms</li>\n<li>Identifying what needs to be said and what doesn't</li>\n</ul>\n<p>And by the end of the presentation I hope that everyone will have learnt a lot from each other and realize that we're all trying to achieve the same thing(s).</p>"
    },
    {
        "speakers": [
            {
                "slug": "michael-meng",
                "details": "",
                "twitter": "",
                "name": "Michael Meng"
            }
        ],
        "title": "API documentation: Exploring the information needs of software developers",
        "abstract": "<p>The success of an API crucially depends on how well its documentation meets the information needs of software developers. But what information do developers need? What information do they want, and what information are they actually using when starting to learn a new API and solve programming tasks with it?\nIn this talk, I will present the results of some empirical studies I conducted with my team to better understand the information needs of software developers. One the one hand, we ran more than 20 semi-structured interviews with junior and senior developers and asked them \u2013 among other things \u2013 to tell us about the questions they raise first when approaching a new API, the type of documentation they look for, and general expectations and experiences regarding API documentation. Key findings derived from the interviews were then followed up on by a standardized survey in which more than 110 developers participated. Our second study took a different approach. Instead of asking developers what they find important about API documentation, we asked them to solve a few tasks on a simple (REST)-API that was unfamiliar to them. The goal of this study was to observe how the developers approach the tasks and which pieces of the documentation provided with the test API they actually use. Besides presenting the design and main findings of our studies, I will also discuss implications the results may have regarding the contents, structure and design of API documentation.</p>"
    },
    {
        "speakers": [
            {
                "slug": "istvan-zoltan-szabo",
                "details": "",
                "twitter": "szabosteve",
                "name": "Istv\u00e1n Zolt\u00e1n Szab\u00f3"
            }
        ],
        "title": "Writing as a non-native speaker",
        "abstract": "<p>Writing professionally in English as a non-native speaker is a terrifying task sometimes. \"The limits of my language mean the limits of my world.\" You have less limit when writing in your mother tongue. And you may experience hard boundaries when you have to deal with other languages on a professional level.</p>\n<p>As a beginner (non-native English) content creator, I had hard times during my work. Most of the problems came from me because the lack of confidence and the lack of practice. To grow faster, I had to build a process (rather a routine) that I can follow during my work on a daily basis. I had to find the most effective supporting tools. And maybe the most important: I had to figure out how can I keep myself motivated in spite of every failure.</p>\n<p>How can a junior writer overcome the initial difficulties? My presentation tries to answer this question through real life examples to help other juniors in their struggles. And offers some writing tools, habits, and methods that may be worth to take a chance.</p>\n<p>I would like to present what I've learned during my journey so far.</p>"
    },
    {
        "speakers": [
            {
                "slug": "kata-nagygyorgy",
                "details": "",
                "twitter": "NagygyorgyKata",
                "name": "Kata Nagygy\u00f6rgy"
            }
        ],
        "title": "Poll the Docs",
        "abstract": "<p>The Write the Docs community has been growing over the past few years, and we're incredibly happy to see the wide diversity that it contains. In the beginning of 2016 we put together a survey to investigate how people are doing their jobs, what the current status is of  documentation, and what the future will bring. We're calling this effort \"Poll the Docs\".</p>\n<p>Thanks to the 100+ participants who already filled it out and shared their experiences and thoughts about documentation. We will be able to share insights about the demographic background of the community, how documentarians usually start working in this field and give an overview of the most supported practises, tools, languages and skills. </p>"
    },
    {
        "speakers": [
            {
                "slug": "daniel-beck",
                "details": "",
                "twitter": "ddbeck",
                "name": "Daniel Beck"
            }
        ],
        "title": "Checklist the Docs",
        "abstract": "<p>The aviation industry has made flying long distances at high speeds one of the safest ways to travel. How did they do it? In part with the help of the humble but effective checklist! In this talk, you\u2019ll learn to adapt the checklist practices of high-risk environments, like flight decks and operating rooms, to avoid mistakes and improve your documentation process.</p>\n<p>Have you ever missed an important step that you\u2019ve done a hundred times before, or are you worried that you might someday? Or have you ever repeatedly made the same, avoidable mistake? A well-designed checklist might help you avoid errors large and small and increase confidence in your workflow. In this talk, you\u2019ll learn:</p>\n<ul>\n<li>How to write a checklist that you\u2019ll actually want to use</li>\n<li>How to choose the right time and place to follow your checklist</li>\n<li>How to extend your checklists with automation or teamwork</li>\n</ul>\n<p>Inspired by research and practices in aerospace safety (such as \u201cHuman Factors of Flight Deck Checklists: The Normal Checklist\u201d by Degani &amp; Wiener), medical safety (such as \u201cThe Checklist Manifesto\u201d by Atul Gawande), and cognitive psychology (such as \u201cHuman Error\u201d by James Reason), this talk will guide you through the process of making and using checklists in the day-to-day work of creating documentation.</p>\n<p>From what distinguishes a checklist from a to-do list to developing checklist habits, you\u2019ll learn how to use checklists to help you write the docs.</p>"
    },
    {
        "speakers": [
            {
                "slug": "thursday-bram",
                "details": "",
                "twitter": "thursdayb",
                "name": "Thursday Bram"
            }
        ],
        "title": "What Writing Fiction Teaches You About Writing Documentation",
        "abstract": "<p>Writing fiction and writing documentation have much more in common that typing out large blocks of text. This talk will talk about elements of fiction writing that improve the process of writing docs: Understanding audience: the tools fiction writers use to understand their audience (as well as to communicate with them) offer deeper looks at who reads what. The process of connecting with an audience is integral to fiction, but often overlooked in documentation \u2014 resulting in hard-to-use docs that don\u2019t help users. Building story arcs: arguably, all fiction boils down to about seven different plots, retold in millions of different ways. Understanding underlying story structure makes the process of writing new tales much easier. Those story structures and plot elements can map directly to parts of documentation, as well as show options for creating standing elements for documentation. * Writing prose worth reading: documentation can be enjoyable to read, provided a writer is willing to invest time in crafting good reading material.\nThis talk will draw on examples from both popular fiction and documentation out in the world today.</p>"
    },
    {
        "speakers": [
            {
                "slug": "jan-christian-krause",
                "details": "",
                "twitter": "idocit",
                "name": "Jan Christian Krause"
            }
        ],
        "title": "Using meaningful names to improve API-documentation",
        "abstract": "<p>Interaction between incorporated software-systems is often realized via application programming interfaces (APIs). The API-documentation explains how to use the API. If it misses important information, serious misunderstandings between the API\u2019s consumer and provider can be the consequence.</p>\n<p>I my talk I will show how meaningful names in the source-code can help finding gaps in the API-documentation. My findings base on my project-experiences and a cross-sectional study of a corpus of more than 186.000 web service-operations. I would like to share the 20 description-patterns for API-documentation I found so far. They provide detailed recommendations description of specific operations. The talk closes with a comparison of classical \u201eswagger-like\u201c API-documentation with the presented approach.</p>"
    },
    {
        "speakers": [
            {
                "slug": "sarah-chambers",
                "details": "",
                "twitter": "sarahleeyoga",
                "name": "Sarah Chambers"
            }
        ],
        "title": "Documentarians and Support: Work Better Together",
        "abstract": "<p>Do you know what the support agents are doing over in their corner? It\u2019s not all cat gifs and angry users. There\u2019s real value to be found in working together with your support team. They are a direct line to your users!</p>\n<p>It can definitely be difficult to bridge this gap between disciplines, but your goals are 100% the same: help the customer do The Thing. Because support literally spends all day talking to customers, they have a ton of amazing data about the effectiveness of documentation, and the tasks customers are trying to accomplish.</p>\n<p>Building a better relationship with your support team will help you build a better relationship with your users. I\u2019ve seen first hand how coordination drives a well executed user experience all the way from self service to hands-on support. Work together better and see tangible results in your user happiness!</p>\n<p>In this talk, I\u2019ll show you:\n\u00b7         the value of having support and technical writing aligned\n\u00b7         how to break down the silos between teams and work effectively together\n\u00b7         how to access and use the glorious data that support is already collecting\n\u00b7         the metrics that matter for support-led user assistance</p>"
    },
    {
        "speakers": [
            {
                "slug": "riona-macnamara",
                "details": "",
                "twitter": "rionam",
                "name": "Riona MacNamara"
            }
        ],
        "title": "Pretty hurts: Why better trumps best",
        "abstract": "<p>What are the characteristics of a great documentation set? Completeness? Accuracy? Style? Format? No! A great documentation set is one that meets its objectives, and sometimes the barrier to greatness is not dedication, skill, or passion, but a reluctance to let things go. Every document we publish should reach a certain quality threshold - but that threshold varies depending on its audience, the maturity of the project, and the overall project goals. What matters is not that docs are perfect, but that they are <em>good enough</em>. </p>\n<p>But how to determine if a doc is \"good enough\"? This talk will cover how to:</p>\n<ul>\n<li>Define document quality</li>\n<li>Establish an appropriate quality bar for a document or doc set</li>\n<li>Determine if a document meets that bar.</li>\n</ul>\n<p>We're all overloaded. We're all stretched for time. Every hour we spend making a doc better than it needs to be is an hour stolen from other projects where we could have more impact. Choosing \"good enough\" doesn't mean we're lowering our standards; it means we're choosing <em>appropriate</em> standards and prioritizing correctly. Don't let the perfect be the enemy of the good.</p>"
    },
    {
        "speakers": [
            {
                "slug": "paul-adams",
                "details": "",
                "twitter": "therealpadams",
                "name": "Paul Adams"
            }
        ],
        "title": "Postulating The Backlog Laxative",
        "abstract": "<p>So you had an idea for an awesome software product and started to build up your team of engineers around it. Two things are almost inevitable: you chose some super cool programming language like Clojure and you're doing Scrum for the process. Good for you.</p>\n<p>When your company grows, you end up with multiple Scrum teams. But you also end up with new activities: documentation, blogging, demos, submissions to conferences to show-off your awesome heap of Clojure. How are you going to get all of /that/ done?</p>\n<p>\"The book\" tells you to mix all these activities in with your Scrum engineering teams. \"The Book\" was also probably written by someone who has never had to do devrel in their lives (or, who hates devrel engineers). Numerous problems exist at the interface between product engineering and devrel and the result is your devrel backlog can get backed-up.</p>\n<p>Dr. Paul (not a real doctor) has the laxative you need! In this talk he presents his experience of structuring multiple Scrum teams at Crate.IO in order to loosen-up the devrel backlog: ensuring highly quality feature documentation, getting out those blog posts and showing-off our lovely heap of Clojure*.</p>\n<p>*Crate is written in Java.</p>"
    },
    {
        "speakers": [
            {
                "slug": "rory-tanner",
                "details": "",
                "twitter": "roringtonj",
                "name": "Rory Tanner"
            }
        ],
        "title": "Information micro-architecture: grammar, syntax, and cognitive rhetoric",
        "abstract": "<p>Most discussions of information architecture (IA) treat it as a high-level discipline: it\u2019s that thing we do site-wide, obsessing happily about taxonomies, hierarchies, and metadata, so that our content is more maintainable, navigable, and searchable. But what do your readers do when they actually find the information that they\u2019re looking for? They read it. They read the words. Where\u2019s your information architecture now?</p>\n<p>In this talk I\u2019ll identify a few different ways that we can apply IA principles productively also at the micro levels of paragraph, sentence, and phrase.  We\u2019ll focus on a series of syntactic structures that prove their special architectural significance, based on the results of ongoing content testing at docs.shopify.com and on recent work in the field of psycholinguistics. These key examples show how far we can improve sentence processing speed, and thereby reader engagement, when we use grammar deliberately as information micro-architecture. The composition and revision strategies that this approach suggests are especially useful for anyone who\u2019s writing, editing, or optimizing content for use at scale.</p>"
    },
    {
        "speakers": [
            {
                "slug": "joan-wendt",
                "details": "",
                "twitter": "",
                "name": "Joan Wendt"
            }
        ],
        "title": "Operations Technical Writing for Data Centers",
        "abstract": "<p>Operations tech writing encompasses both hardware and software, and the challenge is coming up to speed on the intersecting parts of these 2 disciplines. More than any other type of tech writing, operations TW is the art of supporting highly technical, cross-functional teams. Most companies create super secret, bleeding edge technologies to make their data centers efficient, powerful, reliable, economical, and, hopefully, green. There are few opportunities to gain background info to bring yourself up to speed and feel confident about your technical prowess. </p>\n<p>This is a little talked about area of TW that's growing in importance and demand. At Google, it's been difficult to find writers qualified to handle the cross-functional complexities/hit the ground running, and the ramp up is steep. I'll address the demands of working in this challenging but fascinating field, as well as some cultural perks such as working with physical engineers (mechanical, electrical, manufacturing), travel, and developing one's photography skills -- and saying goodbye to capturing screenshots. </p>"
    },
    {
        "speakers": [
            {
                "slug": "sarah-karp",
                "details": "",
                "twitter": "skarpediem",
                "name": "Sarah Karp"
            }
        ],
        "title": "Watch that tone! Creating an information experience in the Atlassian voice",
        "abstract": "<p>Two years ago, Atlassian had no consistent voice guidelines across its content channels and product suite, creating a disjointed brand experience. Today, our Information Experience writers now own the Atlassian voice and tone, and are teaching everyone from developers, product managers, designers, and marketers how to voicify their content. </p>\n<p>In this talk, Sarah Karp (Information Experience Team Lead) will answer the following questions: </p>\n<ul>\n<li>What is the Atlassian voice? </li>\n<li>Why is a consistent voice important?</li>\n<li>How can you apply voice and tone to a piece of UI copy? </li>\n</ul>\n<p>Along the way, Sarah will share ways in which the Information Experience writers have applied voicify guidelines across the entire organization. She'll also share a couple of lessons on voice and tone gone wrong and how to learn from those mistakes. </p>\n<p>At the end of the talk, you'll come away with an understanding of why successful products have a distinctive voice and tone. You'll also come away with great examples of voice and tone wins (and fails), and practical tips about how to create voicify guidelines for writers and non-writers alike. </p>"
    },
    {
        "speakers": [
            {
                "slug": "rachel-whitton",
                "details": "",
                "twitter": "rachwhitton",
                "name": "Rachel Whitton"
            }
        ],
        "title": "Delivering High-Velocity Docs that Keep Pace with Rapid Release Cycles",
        "abstract": "<p>To prevent stale content and achieve a high standard of alignment with products, documentation must be a required component of the release cycle. At Pantheon, this means delivering each component with similar precision and trust. Documentation workflows must evolve to stay instep with agile and automated product pipelines. </p>\n<p>In addition to sharing lessons learned, this talk will explore Pantheon\u2019s strategy for delivering high-velocity docs: </p>\n<ul>\n<li>Increase project visibility </li>\n<li>Simplify peer reviews </li>\n<li>Make bots do the scutwork </li>\n<li>Write more docs </li>\n</ul>"
    },
    {
        "speakers": [
            {
                "slug": "margaret-eker",
                "details": "",
                "twitter": "",
                "name": "Margaret Eker"
            },
            {
                "slug": "jennifer-rondeau",
                "details": "",
                "twitter": "",
                "name": "Jennifer Rondeau"
            }
        ],
        "title": "Docs as Code: The Missing Manual",
        "abstract": "<p>Treating docs as code, an approach that more and more teams and companies are moving toward, involves more than putting the two together in a repo. We discuss some of the details that often get lost in as dev and docs learn to work together in new ways. Because if all we do is put doc files next to code files in source control, or use parts of the same workflow for code and docs, we're still isolating docs as a separate sort of responsibility, free from the obligations of systematic review and testing without which code would never be accepted into production.</p>\n<p>Some missing parts of this newer approach to documentation workflow that we'll discuss include:</p>\n<ul>\n<li>Outlining a documentation lifecycle that describes how material moves from initial draft to final production, to help people unfamiliar with documentation development understand better how to efficiently manage documentation review and testing.</li>\n<li>Mapping GitHub workflow clearly to documentation workflow. This can help writers and editors understand better just how to use GitHub effectively, and equally important how it can help other contributors (notably programmers) understand the parts of the writer workflow that can be lost when docs move next to code.</li>\n<li>Creating an information architecture. Words need structure to provide meaning, usability, and discoverability. A strong content architecture provides logical places for adding new content, especially for doc projects at scale.</li>\n<Li>Developing and enforcing a style guide: terminology, voice, tone. These things make the difference between words that users might understand, and documentation that can truly assist.</li>\n<li>Reviewing and line/copy editing. Because you wouldn't do any less for code, right?</li>\n</ul>"
    }
]
